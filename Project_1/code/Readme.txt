ΜΕΛΗ ΟΜΑΔΑΣ:
Ονοματεπώνυμο:Δημήτριος Ράμμος ΑΜ:1115201900161
Ονοματεπώνυμο:Ιωάννα Οικονόμου ΑΜ:1115201900137

ΠΑΡΑΔΟΧΕΣ
1) 1 bucket αντιστοιχεί σε 1 block
2) H create_index λειτουργεί αρχικά με βάθος 2 λόγω της main αλλά μπορεί να λειτουργήσει μέχρι και με βάθος 7 αν αυτό αλλαχτεί από την main.
3) Δοκιμάσαμε να καταχωρήσουμε μέχρι και 200000 εγγραφές, μπορεί να λειτουργήσει και με παραπάνω αλλά δεν το έχουμε δοκιμάσει λόγω χρόνου εκτέλεσης.


ΕΠΕΞΗΓΗΣΗ ΣΧΕΔΙΑΣΤΙΚΩΝ ΕΠΙΛΟΓΩΝ
Σχετικά με την δομή των blocks:


    Το πρώτο block του αρχείου είναι block πληροφοριών που περιέχει το ολικό βάθος που μπορεί να αλλάξει στην πορεία και έπειτα
    αποθηκεύονται οι αριθμοί των block που αποτελούν το ευρετήριο με τον πρώτον από αυτούς να είναι το 1.
    Στη συνέχεια, αν υπάρχουν κι άλλα, ακολουθούν το 1 σε αύξουσα σειρά.
    Όταν δεν υπάρχουν άλλα block ευρετηρίου να αποθηκέυσουμε σε block πληροφοριών η επόμενη τιμή στο block πληροφοριών είναι το -1,
    που είναι και το τέλος. 

    Το block 1 είναι η αρχή του ευρετηρίου μας. Αποθηκεύουμε ακέραιους (int).
    Έστω για παράδειγμα ότι το βάθος μας είναι 3. Αυτό σημαίνει ότι θα έχουμε έναν πίνακα μεγέθους 2^3 = 8.
    Αυτό το αντικατοπτρίζουμε στο block αντιστοιχίζοντας σε κάθε θέση του πίνακα έναν ακέραιο που αντιστοιχεί στον αριθμό του block που δείχνει.

    Ένα hash block μπορεί να αποθηκέυσει μέχρι και BF_BLOCK_SIZE/sizeof(int) θέσεις του αντίστοιχου πίνακα.
    Άρα, έστω ότι έχουμε βάθος 7 και BF_BLOCK_SIZE = 512. Τότε ο πίνακας μας χωράει ακριβώς σε ένα block ευρετηρίου.

    Αν όμως, το βάθος γίνει 8 τότε χρειαζόμαστε δύο block για το ευρετήριο, επομένως κρατάμε το πρώτο block και δεσμεύουμε νέο
    block στο τέλος του αρχείου.
    Για να γνωρίζουμε ποιο είναι το επόμενο block ευρετηρίου το κρατάμε στο πρώτο block πληροφοριών. 
    Επομένως, ενημερώνουμε τις τιμές του παλιού και νέου ευρετηρίου.

    Αν το block πληροφοριών γεμίσει, δεσμέυουμε δεύτερο στο τέλος του αρχείου.
    Στην προτελευταία τιμή του τελευταίου block πληροφοριών πριν δεσμεύσουμε το καινούριο, αποθηκεύουμε την τιμή -2 και στην τελευταία
    τον αριθμό του νέου block πληροφοριών και συνεχίζουμε να γράφουμε τις τιμές των νέων hash block στο καινούριο info block.

    Επομένως, το πρόγραμμα μας έχει δομηθεί έτσι ώστε να έχει επεκτασιμότητα και μπορούν να σημιουργηθούν πολλά blocks ευρετηρίου και πληροφοριών.

Σε κάθε bucket το πρώτο στοιχείο είναι το τοπικό βάθος.

Έχουμε δημιουργήσει δύο επιπλέον συναρτήσεις, τις CreateNewBucket και CreateNewHashTable.

    Και οι δύο καλλούνται στην περίπτωση που μια νέα εγγραφή δεν χωράει σε υπάρχον bucket.

    Η πρώτη χρησιμοποείται στην περίπτωση που το τοπικό βάθος του bucket είναι μικρότερο από το ολικό και σύμφωνα με τον αλγόριθμο 
    πρέπει να κάνουμε split.

    Η δεύτερη χρησιμοποιείται στην περίπτωση που το τοπικό και το ολικό βάθος είναι ίσα και σύμφωνα με τον αλγόριθμο πρέπει να
    επεκτείνουμε το ευρετήριο και στη συνέχεια να καλέσουμε την CreateNewBucket για να κάνει split.

Έχουμε επεκτείνει τις δυνατότητες του MakeFile έτσι ώστε:
    Με την εντολή make run να μετταγλωτίζεται και να τρέχει το πρόγραμμά μας.
    Με την εντολή make ht να μετταγλωτίζεται το hash_file.c
    Με την εντολή make bf να μετταγλωτίζεται το bf.c
    Με την εντολή make clean να διαγράφονται τα περιττά αρχεία (αυτή η εντολή πρέπει να εκτελείται πριν ξανατρέξουμε το πρόγραμμά).

Επιπλέον, δημιουργήσαμε μια επιπλέον main function που βρίσκεται στον φάκελο examples στην οποία ο αριθμός των εγγραφών ζητείται
από το πληκτρολόγιο.